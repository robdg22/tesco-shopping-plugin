(()=>{"use strict";({383:function(){var e=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function s(e){try{c(o.next(e))}catch(e){a(e)}}function i(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,i)}c((o=o.apply(e,t||[])).next())}))};function t(t){return e(this,arguments,void 0,(function*(e,t={}){const n=yield fetch("https://tesco-proxy-b4fena2ys-robdgraham-gmailcoms-projects.vercel.app/api/tesco",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:e,variables:t})});if(!n.ok)throw new Error(`API request failed with status ${n.status}`);return n.json()}))}figma.showUI(__html__,{width:400,height:600}),figma.ui.onmessage=n=>e(void 0,void 0,void 0,(function*(){console.log("Received message:",n);try{switch(n.type){case"searchProducts":yield function(n){return e(this,void 0,void 0,(function*(){if(!(null==n?void 0:n.query))return void figma.ui.postMessage({type:"error",error:"Search query is required"});try{const e=yield t("\n    query SearchProducts($query: String!, $count: Int) {\n      search(query: $query, count: $count) {\n        pageInformation: info {\n          totalCount: total\n          pageNo: page\n          count\n        }\n        productItems: products {\n          id\n          baseProductId\n          title\n          brandName\n          shortDescription\n          defaultImageUrl\n          price {\n            price: actual\n            unitPrice\n            unitOfMeasure\n          }\n        }\n      }\n    }\n  ",{query:n.query,count:n.count||10});figma.ui.postMessage({type:"searchProductsResponse",data:e})}catch(e){figma.ui.postMessage({type:"error",error:`Search failed: ${e instanceof Error?e.message:"Unknown error"}`})}}))}(n.payload);break;case"getTaxonomy":yield function(){return e(this,void 0,void 0,(function*(){try{const e=yield t("\n    query TaxonomySuperDepts($storeId: ID, $style: String) {\n      taxonomy(storeId: $storeId) {\n        id\n        name\n        label\n        images(style: $style) {\n          style\n          images {\n            type\n            url\n            __typename\n          }\n          __typename\n        }\n        __typename\n      }\n    }\n  ",{storeId:"3060",style:"rounded"});if(e.data&&e.data.taxonomy){const t=e.data.taxonomy.filter((e=>"superdepartment"===e.label||"TaxonomyItemType"===e.__typename));figma.ui.postMessage({type:"getTaxonomyResponse",data:Object.assign(Object.assign({},e),{data:Object.assign(Object.assign({},e.data),{taxonomy:t})})})}else figma.ui.postMessage({type:"getTaxonomyResponse",data:e})}catch(e){figma.ui.postMessage({type:"error",error:`Failed to load categories: ${e instanceof Error?e.message:"Unknown error"}`})}}))}();break;case"getCategoryProducts":yield function(n){return e(this,void 0,void 0,(function*(){if(!(null==n?void 0:n.categoryId))return void figma.ui.postMessage({type:"error",error:"Category ID is required"});try{const e=yield t("\n    query GetCategoryProducts($categoryId: ID, $count: Int) {\n      category(categoryId: $categoryId, count: $count) {\n        pageInformation: info {\n          totalCount: total\n          pageNo: page\n          count\n        }\n        productItems: products {\n          id\n          baseProductId\n          title\n          brandName\n          shortDescription\n          defaultImageUrl\n          price {\n            price: actual\n            unitPrice\n            unitOfMeasure\n          }\n        }\n      }\n    }\n  ",{categoryId:n.categoryId,count:n.count||10});figma.ui.postMessage({type:"getCategoryProductsResponse",data:e})}catch(e){figma.ui.postMessage({type:"error",error:`Failed to load category products: ${e instanceof Error?e.message:"Unknown error"}`})}}))}(n.payload);break;default:figma.ui.postMessage({type:"error",error:"Unknown message type"})}}catch(e){console.error("Plugin error:",e),figma.ui.postMessage({type:"error",error:e instanceof Error?e.message:"Unknown error"})}}))}})[383]()})();